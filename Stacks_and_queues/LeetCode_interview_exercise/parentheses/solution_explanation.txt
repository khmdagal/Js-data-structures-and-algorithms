function isBalancedParentheses(parentheses) {
    const stack = new Stack();
    for (const p of parentheses) {
        if (p === '(') {
            stack.push(p);
        } else if (p === ')') {
            if (stack.isEmpty() || stack.pop() !== '(') {
                return false;
            }
        }
    }
    return stack.isEmpty();
}




The isBalancedParentheses() function uses a stack to determine whether a given string of parentheses is balanced or not.

Here's a step-by-step explanation of the logic:



Create a new instance of the Stack class and store it in a variable named stack.

Traverse the input string (parentheses) using a for loop, iterating through each character (p) in the string.

Inside the loop, perform the following checks:

If the character (p) is an opening parenthesis '(', push it onto the stack.

If the character (p) is a closing parenthesis ')', check if the stack is empty or if the popped element from the stack is not an opening parenthesis '('.

If either of these conditions is true, return false as the parentheses are not balanced.

After the loop terminates, check if the stack is empty.

If the stack is empty, return true, indicating that the parentheses are balanced.

If the stack is not empty, return false, indicating that the parentheses are not balanced.



By pushing each opening parenthesis onto the stack and then popping them when encountering a closing parenthesis, the function can determine whether the parentheses are balanced.

If the stack is empty at the end of the process, the input string has balanced parentheses.





Code with inline comments:



function isBalancedParentheses(parentheses) {
    // Create a new stack instance
    const stack = new Stack();
 
    // Iterate through each character in the input string
    for (const p of parentheses) {
        // If the character is an opening parenthesis
        if (p === '(') {
            // Push it onto the stack
            stack.push(p);
        }
        // If the character is a closing parenthesis
        else if (p === ')') {
            // Check if the stack is empty or the popped
            // value is not an opening parenthesis
            if (stack.isEmpty() || stack.pop() !== '(') {
                // Return false, as the parentheses are not balanced
                return false;
            }
        }
    }
 
    // Return true if the stack is empty, indicating balanced parentheses
    return stack.isEmpty();
}